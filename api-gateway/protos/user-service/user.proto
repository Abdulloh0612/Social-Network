syntax = "proto3";

option  go_package  = "user-service.v1;users1";

service UserService {
  rpc Register(CreateUserReq) returns (RegisterRes);
  rpc Login(LoginUserReq) returns (AuthRes);
  rpc Authorization(AuthUser) returns (AuthRes);
  rpc Create(CreateUserReq) returns (User);
  rpc Update(UpdateUserReq) returns (User);
  rpc UpdatePassword(UpdatePasswordReq) returns (User);
  rpc Delete(DeleteUserReq) returns (Status);
  rpc Get(GetUserReq) returns (User);
  rpc GetAll(GetAllUsersReq) returns (GetAllUsersRes);
  rpc CheckUniques(CheckUniqReq) returns (CheckUniqResp);
}

message User {
  string id = 1;
  string user_name = 2;
  string password = 3;
  string first_name = 4;
  string last_name = 5;
  string birth_date = 6;
  string biography = 7;
  string gender = 8;
  string profile_picture = 9;
  string email = 10;
  string phone_number = 11;
  string refresh_token = 12;
  string created_at = 13;
  string updated_at = 14;
  string deleted_at = 15;
}

message CreateUserReq {
  string user_name = 2;
  string password = 3;
  string first_name = 4;
  string last_name = 5;
  string birth_date = 6;
  string biography = 7;
  string gender = 8;
  string profile_picture = 9;
  string email = 10;
  string phone_number = 11;
}

message RegisterRes{
  User user = 1;
  string code = 2;
}

message LoginUserReq {
  string user_name = 2;
  string password = 3;
  string email = 10;
}

message AuthUser{
  string email = 1;
  string code = 2;
}

message Status {
  string message = 1;
}

message AuthRes {
  User user = 1;
  string refresh_token = 2;
}

message UpdateUserReq {
  string user_name = 2;
  string password = 3;
  string first_name = 4;
  string last_name = 5;
  string birth_date = 6;
  string biography = 7;
  string gender = 8;
  string profile_picture = 9;
}

message UpdatePasswordReq {
  string email = 1;
  string old_password = 2;
  string new_password = 3;
}

message GetAllUsersReq {
  int64 page = 1;
  int64 limit = 2;
  string field = 3;
  string value = 4;
  string sortby = 5;
  string started_at = 6;
  string ended_at = 7;
}

message GetAllUsersRes {
  repeated User allUsers = 1;
  int64 count = 2;
}

message GetUserReq {
  string field = 1;
  string value = 2;
}

message DeleteUserReq {
  string field = 1;
  string value = 2;
  string is_hard_delete = 3;
}

message CheckUniqReq {
  string field = 1;
  string value = 2;
}

message CheckUniqResp{
  bool is_unique = 1;
}